#The following is needed to order the ggplot x-axis!
damage_data$Event_Type <- factor(damage_data$Event_Type,
levels = damage_data$Event_Type[order(damage_data$Damage, decreasing=TRUE)])
ggplot(data=damage_data, aes(x=Event_Type, y=Damage/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
injuries_data <- events[order(events$HealthImpact,decreasing = TRUE),]
print(injuries_data)
#The following is needed to order the ggplot x-axis!
injuries_data$Event_Type <- factor(injuries_data$Event_Type,
levels = injuries_data$Event_Type[order(injuries_data$Injuries, decreasing=TRUE)])
ggplot(data=injuries_data, aes(x=Event_Type, y=Injuries, fill=Injuries)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Injuries") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Health impact / Event Type")
damage_data <- events[order(events$Damage,decreasing = TRUE),]
#The following is needed to order the ggplot x-axis!
damage_data$Event_Type <- factor(damage_data$Event_Type,
levels = damage_data$Event_Type[order(damage_data$Damage, decreasing=TRUE)])
ggplot(data=damage_data, aes(x=Event_Type, y=Damage/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
injuries_data <- events[order(events$HealthImpact,decreasing = TRUE),]
print(injuries_data)
#The following is needed to order the ggplot x-axis!
injuries_data$Event_Type <- factor(injuries_data$Event_Type,
levels = injuries_data$Event_Type[order(injuries_data$HealthImpact, decreasing=TRUE)])
ggplot(data=injuries_data, aes(x=Event_Type, y=Injuries, fill=Injuries)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Injuries") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Health impact / Event Type")
injuries_data <- events[order(events$HealthImpact,decreasing = TRUE),]
print(injuries_data)
#The following is needed to order the ggplot x-axis!
injuries_data$Event_Type <- factor(injuries_data$Event_Type,
levels = injuries_data$Event_Type[order(injuries_data$HealthImpact, decreasing=TRUE)])
ggplot(data=injuries_data, aes(x=Event_Type, y=HealthImpact, fill=Injuries)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Injuries") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Health impact / Event Type")
injuries_data$Event_Type <- factor(injuries_data$Event_Type,
levels = injuries_data$Event_Type[order(injuries_data$HealthImpact, decreasing=TRUE)])
ggplot(data=injuries_data, aes(x=Event_Type, y=HealthImpact, fill=HealthImpact)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Injuries") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Health impact / Event Type")
ggplot(data=injuries_data, aes(x=Event_Type, y=HealthImpact/1000, fill=HealthImpact)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Injuries (x 1000)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Health impact / Event Type")
events$Event_Type
storm_data <- backup
storm_data$PROPDMGEXP <- toupper(as.character(storm_data$PROPDMGEXP))
storm_data$PROPDMGEXP <- gsub('(\\+)|(\\-)|(\\?)|[1-9]', 0, storm_data$PROPDMGEXP) # remove typo/odd cases
storm_data$PROPDMGEXP[storm_data$PROPDMGEXP == 'H'] <- 100
storm_data$PROPDMGEXP[storm_data$PROPDMGEXP == 'K'] <- 1000
storm_data$PROPDMGEXP[storm_data$PROPDMGEXP == 'M'] <- 1000000
storm_data$PROPDMGEXP[storm_data$PROPDMGEXP == 'B'] <- 1000000000
storm_data$PROPDMGEXP[is.na(storm_data$PROPDMGEXP)] <- 1
storm_data$PROPDMGEXP[storm_data$PROPDMGEXP == ""] <- 1
storm_data$PROPDMG[is.na(storm_data$PROPDMG)] <- 0
storm_data$PROPDMG[storm_data$PROPDMG == ""] <- 0
storm_data$CROPDMGEXP <- toupper(as.character(storm_data$CROPDMGEXP))
storm_data$CROPDMGEXP <- gsub('(\\+)|(\\-)|(\\?)|[1-9]', 0, storm_data$CROPDMGEXP) # remove typo/odd cases
storm_data$CROPDMGEXP[storm_data$CROPDMGEXP == 'H'] <- 100
storm_data$CROPDMGEXP[storm_data$CROPDMGEXP == 'K'] <- 1000
storm_data$CROPDMGEXP[storm_data$CROPDMGEXP == 'M'] <- 1000000
storm_data$CROPDMGEXP[storm_data$CROPDMGEXP == 'B'] <- 1000000000
storm_data$CROPDMGEXP[is.na(storm_data$CROPDMGEXP)] <- 1
storm_data$CROPDMGEXP[storm_data$CROPDMGEXP == ""] <- 1
storm_data$CROPDMG[is.na(storm_data$CROPDMG)] <- 0
storm_data$CROPDMG[storm_data$CROPDMG == ""] <- 0
storm_data$DAMAGE <- as.numeric(storm_data$PROPDMG) * as.numeric(storm_data$PROPDMGEXP) +
as.numeric(storm_data$CROPDMG) * as.numeric(storm_data$CROPDMGEXP)
#Calculate and replace in the original data frame
storm_data$HEALTHIMPACT <- as.numeric(storm_data$FATALITIES) + as.numeric(storm_data$INJURIES)
storm_data <- storm_data %>% filter(FATALITIES > 0 | INJURIES > 0 | DAMAGE > 0)
#Remove unwanted columns
storm_data$PROPDMG <- storm_data$PROPDMGEXP <- storm_data$CROPDMG <- storm_data$CROPDMGEXP <- NULL
storm_data$PROPDMG <- storm_data$PROPDMGEXP <- storm_data$CROPDMG <- storm_data$CROPDMGEXP <- NULL
storm_data$INJURIES <- storm_data$FATALITIES <- NULL
storm_data$BGN_DATE <- storm_data$BGN_TIME <- storm_data$TIME_ZONE <- NULL
storm_data$COUNTY <- storm_data$COUNTYNAME <- storm_data$STATE <- NULL
storm_data$BGN_RANGE <- storm_data$BGN_AZI <- storm_data$BGN_LOCATI <- NULL
storm_data$END_DATE <- storm_data$END_TIME <- storm_data$COUNTY_END <- NULL
storm_data$COUNTYENDN <- storm_data$END_RANGE <- NULL
storm_data$END_AZI <- storm_data$END_LOCATI <- NULL
storm_data$LENGTH <- storm_data$WIDTH <- storm_data$F <- NULL
storm_data$MAG <- storm_data$WFO <- storm_data$STATEOFFIC <- NULL
storm_data$ZONENAMES <- storm_data$LATITUDE <- storm_data$LONGITUDE <- NULL
storm_data$REMARKS <- storm_data$REFNUM <- storm_data$LATITUDE_ <-  NULL
storm_data$LONGITUDE_ <- storm_data$LATITUDE_E <- storm_data$STATE__ <- NULL
unique(storm_data$EVTYPE)
storm_data[-(storm_data$EVTYPE %in% events$Event_Type)]
unique(storm_data$EVTYPE)
unique(storm_data$EVTYPE)
storm_data[-(storm_data$EVTYPE ! %in% events$Event_Type)]
storm_data[storm_data$EVTYPE !(%in% events$Event_Type)]
unique(storm_data[storm_data$EVTYPE %in% events$Event_Type])
unique(storm_data[storm_data$EVTYPE %in% events$Event_Type,])
unique(storm_data$EVTYPE[storm_data$EVTYPE %in% events$Event_Type])
storm_data2<-storm_data[storm_data$EVTYPE %in% events$Event_Type,]
storm_data2
View(storm_data2)
write.csv(storm_data2,"storm_data.csv")
unique(storm_data$EVTYPE)
library(readr)
storm_data_2 <- read_csv("~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4/storm_data.csv")
View(storm_data_2)
unique(storm_data2$EVTYPE)
storm_data <- csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
years_from <- min(storm_data$YEAR)
years_to <- max(storm_data$YEAR)
event_types <- levels(sort(storm_data$EVTYPE))
event_types
storm_data$EVTYPE
storm_data <- csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
years_from <- min(storm_data$YEAR)
years_to <- max(storm_data$YEAR)
event_types <- unique(sort(storm_data$EVTYPE))
event_types
unique(storm_data$EVTYPE)
write.csv(storm_data2,"storm_data.csv")
storm_data <- csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
years_from <- min(storm_data$YEAR)
years_to <- max(storm_data$YEAR)
event_types <- levels(sort(storm_data$EVTYPE))
event_types
event_types <- unique(sort(storm_data$EVTYPE))
event_types
unique(storm_data2$EVTYPE)
storm_data <- csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
storm_data <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
years_from <- min(storm_data$YEAR)
years_to <- max(storm_data$YEAR)
event_types <- unique(sort(storm_data$EVTYPE))
unique(storm_data2$EVTYPE)
ggplot(data=storm_data, aes(x=YEAR, y=DAMAGE/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=storm_data, aes(x=YEAR, y=DAMAGE/1000000000, fill=DAMAGE)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
plot(storm_data$DAMAGE, type ="l")
plot(storm_data$DAMAGE, type ="p")
ggplot(data=storm_data, aes(x=YEAR, y=DAMAGE/1000000000, fill=DAMAGE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=storm_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=storm_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_gradientn(colors=c("yellow","red")) +
ggtitle("Damage / Event Type")
h <- ggplot(nlme::Oxboys, aes(age, height))
# A single line tries to connect all the observations
h + geom_line()
h <- ggplot(nlme::Oxboys, aes(age, height))
ggplot(nlme::Oxboys, aes(age, height))
ggplot(storm_data,aes(YEAR,DAMAGE))
h<-ggplot(storm_data,aes(YEAR,DAMAGE))
h<-ggplot(storm_data,aes(YEAR,DAMAGE))
h+geom_line(aes(group=EVTYPE))
h<-ggplot(storm_data,aes(YEAR,DAMAGE))
h+geom_line(aers(colour=EVTYPE,group=EVTYPE))
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h<-ggplot(storm_data,aes(YEAR,DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
storm_data2[-storm_data2$EVTYPE == "TSTM WIND"]
storm_data2<-storm_data2[-storm_data2$EVTYPE == "TSTM WIND",]
remove<-storm_data2$EVTYPE == "TSTM WIND"
storm_data <- storm_data[-remove,]
storm_data2 <- storm_data2[-remove,]
unique(storm_data2)
unique(storm_data2$EVTYPE)
remove<-storm_data2$EVTYPE ==""TSTM WIND""
remove<-storm_data2$EVTYPE =="TSTM WIND"
storm_data2 <- storm_data2[-remove,]
unique(storm_data2$EVTYPE)
storm_data2 <- storm_data2[-remove,]
unique(storm_data2$EVTYPE)
remove<-storm_data2$EVTYPE =="DROUGHT"
storm_data2 <- storm_data2[-remove,]
unique(storm_data2$EVTYPE)
remove <- grep('WINDY', storm_data2$EVTYPE)
storm_data2 <- storm_data2[-remove,]
unique(storm_data2$EVTYPE)
storm_data <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
remove <- grep('WINDY', storm_data$EVTYPE)
remove <- grep('WIND', storm_data2$EVTYPE)
remove
remove <- grep('WIND', storm_data$EVTYPE)
remove
storm_data <- storm_data[-remove,]
unique(storm_data)
unique(storm_data$EVTYPE)
remove <- grep('HEAT', storm_data$EVTYPE)
storm_data <- storm_data[-remove,]
unique(storm_data$EVTYPE)
remove <- grep('STORM', storm_data$EVTYPE)
storm_data <- storm_data[-remove,]
unique(storm_data$EVTYPE)
remove <- grep('LIGHT', storm_data$EVTYPE)
storm_data <- storm_data[-remove,]
unique(storm_data$EVTYPE)
remove <- grep('RIP', storm_data$EVTYPE)
storm_data <- storm_data[-remove,]
unique(storm_data$EVTYPE)
storm_data[storm_data=="AVALANCHE"]
storm_data[storm_data=="AVALANCHE",]
storm_data[storm_data$EVTYPE=="AVALANCHE",]
unique(storm_data$EVTYPE)
storm_data[storm_data$EVTYPE=="HAIL",]
write.csv(storm_data,"storm_data.csv")
h<-ggplot(storm_data,aes(YEAR,DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
storm_data[storm_data$EVTYPE=="TORNADO",]
h<-ggplot(data=injuries_data, aes(x=Event_Type, y=HealthImpact/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
g+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h<-ggplot(data=injuries_data, aes(x=Event_Type, y=HealthImpact/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
plot_data <- storm_data
g<-ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
g+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
plot_data <- storm_data
g<-ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
g+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h<-ggplot(data=plot_data, aes(x=Event_Type, y=HealthImpact/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h<-ggplot(data=plot_data, aes(x=YEAR, y=HealthImpact/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
h<-ggplot(data=plot_data, aes(x=YEAR, y=HEALTHIMPACT/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
h+geom_line(aes(colour=EVTYPE,group=EVTYPE))
ggplot(data=plot_data, aes(x=YEAR, y=HEALTHIMPACT/1000)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
g<-ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000,group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000,colour=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000,fill=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=HEALTHIMPACT/1000,fill=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000,fill=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
# sample data.
d <- data.frame(Team1=c("Cowboys", "Giants", "Eagles", "Redskins"), Win=c(20, 13, 9, 12))
# basic layer and options
p <- ggplot(d, aes(y=Win)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
# default plot (left panel)
# the variables are alphabetically reordered.
p + geom_bar(aes(x=Team1), stat="identity") + opts(title="Default")
# re-order the levels in the order of appearance in the data.frame
d$Team2 <- factor(d$Team1, as.character(d$Team1))
# same as
# d$Team2 <- factor(d$Team1, c("Cowboys", "Giants", "Eagles", "Redskins"))
# plot on the re-ordered variables (Team2) (middle panel)
p + geom_bar(aes(x=Team2), data=d, stat="identity") + opts(title="Order by manual")
# re-order by variable Win
# the variables are re-orderd in the order of the win
d$Team3 <- reorder(d$Team1, d$Win)
# plot on the re-ordered variables (Team3) (right panel)
p + geom_bar(aes(x=Team3), data=d, stat="identity") + opts(title="Order by variable")
library(ggplot2)
# sample data.
d <- data.frame(Team1=c("Cowboys", "Giants", "Eagles", "Redskins"), Win=c(20, 13, 9, 12))
# basic layer and options
p <- ggplot(d, aes(y=Win)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
# default plot (left panel)
# the variables are alphabetically reordered.
p + geom_bar(aes(x=Team1), stat="identity") + opts(title="Default")
# re-order the levels in the order of appearance in the data.frame
d$Team2 <- factor(d$Team1, as.character(d$Team1))
# same as
# d$Team2 <- factor(d$Team1, c("Cowboys", "Giants", "Eagles", "Redskins"))
# plot on the re-ordered variables (Team2) (middle panel)
p + geom_bar(aes(x=Team2), data=d, stat="identity") + opts(title="Order by manual")
# re-order by variable Win
# the variables are re-orderd in the order of the win
d$Team3 <- reorder(d$Team1, d$Win)
# plot on the re-ordered variables (Team3) (right panel)
p + geom_bar(aes(x=Team3), data=d, stat="identity") + opts(title="Order by variable")
p <- ggplot(d, aes(y=Win)))
p <- ggplot(d, aes(y=Win))
p + geom_bar(aes(x=Team1), stat="identity") + opts(title="Default")
p + geom_bar(aes(x=Team1), stat="identity")
d$Team2 <- factor(d$Team1, as.character(d$Team1))
p + geom_bar(aes(x=Team2), data=d, stat="identity")
d$Team3 <- reorder(d$Team1, d$Win)
p + geom_bar(aes(x=Team3)
)
ggplot(data=plot_data, aes(x=YEAR, y=DAMAGE/1000000000,fill=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Year") + ylab ("$ Damage (billion usd)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
ggplot(data=plot_data, aes(x=YEAR, y=HEALTHIMPACT/1000,fill=EVTYPE, group=EVTYPE)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Health Impact (Injuries+Fatalities x 1000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Public Health impact / Event Type")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
storm_data[storm_data$EVTYPE %in% c("TORNADO","FLOOD")]
storm_data[storm_data$EVTYPE %in% c("TORNADO","FLOOD"),]
runApp()
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
slidify("index.Rmd")
slidify("index.Rmd")
runApp('~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4')
runApp('~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
runApp('~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='luisfocosta',
token='BDCC0C4B436062F959CB0001C3115789',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='luisfocosta',
token='BDCC0C4B436062F959CB0001C3115789',
secret='<SECRET>')
rsconnect::setAccountInfo(name='luisfocosta',
token='BDCC0C4B436062F959CB0001C3115789',
secret='YtfnDUV0wbFYjrMpBcoliLlxR97t9Qrd56RR0n2E')
View(storm_data)
storm_data_simple <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
setwd("~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4")
storm_data_simple <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
View(storm_data_simple)
unique(storm_data_simple$EVTYPE)
subset(storm_data, !(storm_data$EVTYPE %in% storm_data_simple$EVTYPE))
subset(storm_data, !(storm_data$EVTYPE %in% unique(storm_data_simple$EVTYPE))
)
evtypes<-unique(storm_data_simple$EVTYPE)
evtypes
new_storm_data<-subset(storm_data, storm_data$EVTYPE %in% evtypes))
new_storm_data<-storm_data[storm_data$EVTYPE %in% evtypes,]
View(new_storm_data)
dim(new_storm_data)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/DevelopingDataProducts/ProjectAssignmentW4/mydeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
event_types <- unique(storm_data$EVTYPE)
length(event_types)
slidify("index.Rmd")
library(ggplot2)
library(dplyr)
storm_data <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
event_types <- unique(storm_data$EVTYPE)
print(as.data.frame(event_types))
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
print(as.data.frame(event_types))
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
events[order(events$DAMAGE,decreasing = TRUE),]
events
order(events$DAMAGE,decreasing = TRUE),
order(events$DAMAGE,decreasing = TRUE)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
damage_data <- events[order(events$Damage,decreasing = TRUE),]
damage_data$Event_Type <- factor(damage_data$Event_Type,
levels = damage_data$Event_Type[order(damage_data$Damage, decreasing=TRUE)])
ggplot(data=damage_data, aes(x=Event_Type, y=DAMAGE/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
damage_data <- events[order(events$Damage,decreasing = TRUE),]
#The following is needed to order the ggplot x-axis!
damage_data$Event_Type <- factor(damage_data$Event_Type,
levels = damage_data$Event_Type[order(damage_data$Damage, decreasing=TRUE)])
ggplot(data=damage_data, aes(x=Event_Type, y=DAMAGE/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
library(ggplot2)
library(dplyr)
storm_data <- read.csv("storm_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings="NA")
event_types <- unique(storm_data$EVTYPE)
n_event_types <- length(event_types)
print(as.data.frame(event_types))
events <- as.data.frame(matrix(ncol=3,nrow=n_event_types))
names(events) <- c("Event_Type","HealthImpact","Damage")
#Calculate the sum of fatalities/injuries/damage per each event type: this will be our final table!
for (i in 1:length(event_types)) {
events[i,1] <- event_types[i]
events[i,2] <- sum(as.numeric(storm_data[storm_data$EVTYPE == event_types[i],]$HEALTHIMPACT,na.rm=TRUE))
events[i,3] <- sum(as.numeric(storm_data[storm_data$EVTYPE == event_types[i],]$DAMAGE,na.rm=TRUE))
}
events[order(events$Event_Type),]
fatalities_data <- events[order(events$HealthImpact,decreasing = TRUE),]
#The following is needed to order the ggplot x-axis!
fatalities_data$Event_Type <- factor(fatalities_data$Event_Type,
levels = fatalities_data$Event_Type[order(fatalities_data$HealthImpact, decreasing=TRUE)])
ggplot(data=fatalities_data, aes(x=Event_Type, y=HealthImpact, fill=HealthImpact)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("# Fatalities+Injuries") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Fatalities / Event Type")
library(ggplot2)
damage_data <- events[order(events$Damage,decreasing = TRUE),]
#The following is needed to order the ggplot x-axis!
damage_data$Event_Type <- factor(damage_data$Event_Type,
levels = damage_data$Event_Type[order(damage_data$Damage, decreasing=TRUE)])
ggplot(data=damage_data, aes(x=Event_Type, y=DAMAGE/1000000000, fill=Damage)) +
geom_bar(stat="identity") + xlab ("Event Type") + ylab ("$ Damage (billion usd)") +
scale_fill_gradientn(colors=c("yellow","red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Damage / Event Type")
slidify("index.Rmd")
slidify("index.Rmd")
